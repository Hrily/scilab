<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="and_op" xml:lang="fr">
    <refnamediv>
        <refname>&amp;, &amp;&amp;</refname>
        <refpurpose>opérateur ET logique</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Séquence d'appel</title>
        <para>
            Opérateur matriciel avec évaluation complète:
        </para>
        <synopsis>
            full_res = A &amp; B
            int_res = intA &amp; intB
        </synopsis>
        <para>
            Évaluation court-circuitée :
        </para>
        <synopsis>
            short_circuit_res = A &amp;&amp; B
            if (A &amp; B) then ... end
            if (A &amp;&amp; B) then ... end
            while (A &amp; B) then ... end
            while (A &amp;&amp; B) then ... end
        </synopsis>
    </refsynopsisdiv>

    <refsection role="parameters">
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>A</term>
                <listitem>
                    <para>
                        scalaire, vecteur, matrice ou hypermatrice de booléens (possiblement creux),
                        d'entiers codés (de tout <link linkend="inttype">inttype</link>), de nombres réels ou complexes.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>B</term>
                <listitem>
                    <para>
                        scalaire, vecteur, matrice ou hypermatrice de booléens (possiblement creux),
                        d'entiers codés (de tout <link linkend="inttype">inttype</link>), de nombres réels ou complexes.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>full_res</term>
                <listitem>
                    <para>
                        Si <varname>A</varname> et <varname>B</varname> ne sont pas des scalaires,
                        ils doivent être de la même taille et <varname>full_res</varname> est alors une matrice
                        de booléens de leur taille commune.
                        Le résultat est l'opérateur <link linkend="and">and</link> logique appliqué élément
                        par élément entre <varname>A</varname> et <varname>B</varname>.
                    </para>
                    <para>
                        Si <varname>A</varname> ou <varname>B</varname> est un scalaire,
                        <varname>full_res</varname> est une matrice de booléens
                        de la taille de l'autre opérande.
                        Le résultat est l'opérateur <link linkend="and">and</link> logique appliqué élément par élément
                        entre la matrice de la plus grande taille et le scalaire.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>intA</term>
                <listitem>
                    <para>
                        scalaire, vecteur, matrice ou hypermatrice
                        d'entiers codés (de tout <link linkend="inttype">inttype</link>).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>intB</term>
                <listitem>
                    <para>
                        scalaire, vecteur, matrice ou hypermatrice
                        d'entiers codés (de tout <link linkend="inttype">inttype</link>).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>int_res</term>
                <listitem>
                    <para>
                        Si <varname>A</varname> et <varname>B</varname> ne sont pas des scalaires,
                        ils doivent être de la même taille et <varname>int_res</varname> est alors une matrice
                        de booléens de leur taille commune.
                        Le résultat est l'opérateur <link linkend="bitand">bitand</link> appliqué élément
                        par élément entre <varname>A</varname> et <varname>B</varname>.
                    </para>
                    <para>
                        Si <varname>A</varname> ou <varname>B</varname> est un scalaire,
                        <varname>int_res</varname> est une matrice de booléens
                        de la taille de l'autre opérande.
                        Le résultat est l'opérateur <link linkend="bitand">bitand</link> appliqué élément par élément
                        entre la matrice de la plus grande taille et le scalaire.
                    </para>
                    <para>
                        Si les codages en entier de <varname>A</varname> et <varname>B</varname> sont différents,
                        une promotion d'entier est opérée selon les règles suivantes :
                        <itemizedlist>
                            <listitem>
                                si une des opérandes est non signée,  <varname>int_res</varname> est non signé;
                            </listitem>
                            <listitem>
                                <varname>int_res</varname> a le codage entier du nombre de bits le plus grand entre le codage de <varname>A</varname> et celui de <varname>B</varname>;
                            </listitem>
                            <listitem>
                                <varname>A</varname> et <varname>B</varname> sont promus pour être du même codage avant que l'opération ne soit effectuée.
                            </listitem>
                        </itemizedlist>
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>short_circuit_res</term>
                <listitem>
                    <para>
                        booléen scalaire si l'opération est court-circuitée.
                    </para>
                    <para>
                        L'opération court-circuitée renvoie vrai si toutes les entrées de <varname>A</varname> sont vraies. Dans ce cas <varname>B</varname> n'est pas évaluée.
                    </para>
                    <para>
                        Voir <link linkend="and">and</link> pour la définition de l'évaluation à vrai selon le type et le codage utilisé.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>

    <refsection>
        <title>Description</title>
        <para>
            Quand les opérandes de gauche et de droite ne sont <emphasis>pas toutes deux</emphasis> de type entier, <literal>A &amp; B</literal> renvoie le <literal>ET</literal> logique effectué élément par élément entre les matrices <varname>A</varname> et <varname>B</varname> évaluées comme matrice de booléens.
            <varname>A</varname> et <varname>B</varname> doivent être des matrices de même taille ou l'une d'entre elle doit être un scalaire.
            Si une opérande est creuse, le résultat de <literal>A &amp; B</literal> est creux.
        </para>
        <para>
            Quand les deux opérandes sont de type entier, <literal>A &amp; B</literal> renvoie la comparaison bit à bit de chaque élément de <varname>A</varname> et de <varname>B</varname>.
        </para>
        <para>
            Pour les structures de contrôle <link linkend="if">if</link> et <link linkend="while">while</link> ou quand l'on calcule <literal>A &amp;&amp; B</literal>, l'opérande de gauche est évaluée avant l'opérande de droite. Si une entrée de l'opérande de gauche est fausse, le résultat est <literal>%f</literal>, ce qui court-circuite l'évaluation de l'opérande de droite.
            Dans les autres cas, l'on calcule <literal>A &amp; B.</literal>
        </para>
    </refsection>
    <refsection>
        <title>Exemples</title>
        <programlisting role="example"><![CDATA[
A = [0 1; 1 0];
B = [1 1; 0 0];
spA = sparse(A);
spB = sparse(B);
spbA = sparse(A<>0);
spbB = sparse(B<>0);
iA = int8(A);
iB = int8(B);
cA = A + 0*%i;
cB = B + 0*%i;

// A est évalué comme
// [%f, %t;
//  %t, %f]
// B est évalué comme
// [%t, %t;
//  %f, %f]

// & comme ET logique
A & B
A & spB  // Le résultat est creux
iA & spB // Le résultat est creux
cA & iB

// & comme opération bit à bit
iA & iB

i8_A = int8([ -1, 1; 127, -128]);
// codage entier de i8_A:
// [ 1111 1111, 0000 0001 ;
//   0111 1111, 1000 0000 ]

i8_B = int8([-2, 0; 126, -127]);
// codage entier i8_B:
// [ 1111 1110, 0000 0000 ;
//   0111 1110, 1000 0001 ]

i8_1 & i8_B

// Promotion d'entier
i16_A = int16(i8_A);
ui32_B = uint32(i8_B);

i16_A & ui32_B

// && comme opération court-circuitée
function res = foo()
    disp("ceci est exécuté");
    res = %t;
endfunction

if ( %f & foo() ) then
    // foo n'est pas exécuté
end

A && foo()  // Au moins une entrée de A vaut 0
iA && foo() // alors, foo() n'est pas executée
cA && foo()

iA && iB // iA est évaluée à faux et l'opération est court-circuitée
 ]]></programlisting>
    </refsection>

    <refsection role="see also">
        <title>Voir aussi</title>
        <simplelist type="inline">
            <member>
                <link linkend="not">not</link>
            </member>
            <member>
                <link linkend="and">and</link>
            </member>
            <member>
                <link linkend="or_op">opérateur ou (|)</link>
            </member>
            <member>
                <link linkend="bitand">bitand</link>
            </member>
        </simplelist>
    </refsection>
</refentry>
