<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA
 *
 * Copyright (C) 2012 - 2016 - Scilab Enterprises
 *
 * This file is hereby licensed under the terms of the GNU GPL v2.0,
 * pursuant to article 5.3.4 of the CeCILL v.2.1.
 * This file was originally licensed under the terms of the CeCILL v2.1,
 * and continues to be available under such terms.
 * For more information, see the COPYING file which you should have received
 * along with this program.
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="and_op" xml:lang="en">

    <refnamediv>
        <refname>&amp;, &amp;&amp;</refname>
        <refpurpose>logical AND operator</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
        <title>Syntax</title>
        <para>
            Matrix operation with full evaluation:
        </para>
        <synopsis>
            full_res = A &amp; B
            int_res = intA &amp; intB
        </synopsis>
        <para>
            Short-circuited evaluation:
        </para>
        <synopsis>
            short_circuit_res = A &amp;&amp; B
            if (A &amp; B) then ... end
            if (A &amp;&amp; B) then ... end
            while (A &amp; B) then ... end
            while (A &amp;&amp; B) then ... end
        </synopsis>
    </refsynopsisdiv>

    <refsection role="parameters">
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>A</term>
                <listitem>
                    <para>
                        scalar, vector, matrix, or hypermatrix of booleans (may be sparse encoded)
                        encoded integers (of any
                        <link linkend="inttype">inttype</link>), real, or complex numbers.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>B</term>
                <listitem>
                    <para>
                        scalar, vector, matrix, or hypermatrix of booleans (may be sparse encoded)
                        encoded integers (of any
                        <link linkend="inttype">inttype</link>), real, or complex numbers.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>full_res</term>
                <listitem>
                    <para>
                        If <varname>A</varname> and <varname>B</varname> are not scalar,
                        they must be of the same size and <varname>full_res</varname>
                        is a boolean matrix of their common size.
                        The result is the element-wise <link linkend="and">and</link> operation between <varname>A</varname> and <varname>B</varname>.
                    </para>
                    <para>
                        If <varname>A</varname> or <varname>B</varname> is a scalar,
                        <varname>full_res</varname> is a boolean matrix of the size
                        of the other operand.
                        The result is the element-wise <link linkend="and">and</link> operation between the matrix of the greater size and the scalar.
                    </para>
                    <para>
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>intA</term>
                <listitem>
                    <para>
                        scalar, vector, matrix, or hypermatrix of encoded integers (of any
                        <link linkend="inttype">inttype</link>), real, or complex numbers.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>intB</term>
                <listitem>
                    <para>
                        scalar, vector, matrix, or hypermatrix of encoded integers (of any
                        <link linkend="inttype">inttype</link>), real, or complex numbers.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>int_res</term>
                <listitem>
                    <para>
                        If <varname>A</varname> and <varname>B</varname> are not scalar,
                        they must be of the same size and <varname>int_res</varname>
                        is a matrix of integer of their common size.
                        The result is the element-wise <link linkend="bitand">bitand</link> operation between <varname>A</varname> and <varname>B</varname>.
                    </para>
                    <para>
                        If <varname>A</varname> or <varname>B</varname> is a scalar,
                        <varname>int_res</varname> is a boolean matrix of the size
                        of the other operand.
                        The result is the element-wise <link linkend="bitand">bitand</link> operation between the matrix of the greater size and the scalar.
                    </para>
                    <para>
                        If <varname>A</varname> and <varname>B</varname> are of different integer encoding,
                        integer promotion is performed according to the following rules:
                        <itemizedlist>
                            <listitem>
                                if any operand is unsigned, <varname>int_res</varname> is unsigned;
                            </listitem>
                            <listitem>
                                <varname>int_res</varname> has the encoding of the higher number of bits between the encoding of <varname>A</varname> and <varname>B</varname>;
                            </listitem>
                            <listitem>
                                <varname>A</varname> and <varname>B</varname> are promoted to the same encoding before computation is performed
                            </listitem>
                        </itemizedlist>
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>short_circuit_res</term>
                <listitem>
                    <para>
                        boolean scalar when the operation is short-circuited.
                    </para>
                    <para>
                        The short-circuit operation evaluates to false if any entry of <varname>A</varname> is false. In this case <varname>B</varname> is not evaluated.
                    </para>
                    <para>
                        See <link linkend="and">and</link> for the definition of the evaluation to false depending on type and encoding.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>

    <refsection>
        <title>Description</title>
        <para>
            When the right and left operands are <emphasis>not</emphasis> both of integer type, <literal>A &amp; B</literal> yields the element-wise logical
            <literal>AND</literal> of matrices <varname>A</varname> and
            <literal>B</literal> evaluated as matrices of boolean. <varname>A</varname> and <varname>B</varname> must
            be matrices with the same dimensions or one from them must be a single
            boolean.
            If any operand is sparse the result of <literal>A &amp; B</literal> is sparse encoded.
        </para>
        <para>
            When both operands are of integer type, <literal>A &amp; B</literal> yields the bitwise comparison between each element of <varname>A</varname> and <varname>B</varname>.
        </para>
        <para>
            For <link linkend="if">if</link> and <link linkend="while">while</link> control structures or when computing <literal>A &amp;&amp; B</literal>, the left operand is evaluated prior to the right operand. If any entry in the left operand is false, the result is set to <literal>%f</literal> short-circuiting the evaluation of the right operand.
            Otherwise, <literal>A &amp; B</literal> is computed.
        </para>
    </refsection>

    <refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[
A = [0 1; 1 0];
B = [1 1; 0 0];
spA = sparse(A);
spB = sparse(B);
spbA = sparse(A<>0);
spbB = sparse(B<>0);
iA = int8(A);
iB = int8(B);
cA = A + 0*%i;
cB = B + 0*%i;

// A is evaluated as
// [%f, %t;
//  %t, %f]
// B is evaluated as
// [%t, %t;
//  %f, %f]

// & as logical operation
A & B
A & spB  // Result is sparse encoded
iA & spB // Result is sparse encoded
cA & iB

// & as bitwise operation
iA & iB

i8_A = int8([ -1, 1; 127, -128]);
// Integer representation of i8_A:
// [ 1111 1111, 0000 0001 ;
//   0111 1111, 1000 0000 ]

i8_B = int8([-2, 0; 126, -127]);
// Integer representation of i8_A:
// [ 1111 1110, 0000 0000 ;
//   0111 1110, 1000 0001 ]

i8_1 & i8_B

// Integer promotion
i16_A = int16(i8_A);
ui32_B = uint32(i8_B);

i16_A & ui32_B

// && as a shortcut operation
function res = foo()
    disp("this is executed");
    res = %t;
endfunction

if ( %f & foo() ) then
    // This is not executed
end

A && foo()  // A has at least one element equals to 0
iA && foo() // therefore, foo() is not executed
cA && foo()

iA && iB // iA is evalueated as false resulting in the short-circuited operation
 ]]></programlisting>
    </refsection>

    <refsection role="see also">
        <title>See also</title>
        <simplelist type="inline">
            <member>
                <link linkend="not">not</link>
            </member>
            <member>
                <link linkend="and">and</link>
            </member>
            <member>
                <link linkend="or_op">or operator (|)</link>
            </member>
            <member>
                <link linkend="bitand">bitand</link>
            </member>
        </simplelist>
    </refsection>
</refentry>
